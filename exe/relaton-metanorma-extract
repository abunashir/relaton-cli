#!/usr/bin/env ruby

# This script combines a directory of Relaton XML files (generated by
# Metanorma or Relaton) into a Relaton collection. If other file formats,
# such as XML, DOC, PDF and HTML are available, those links will be added
# into the corresponding Bibdata entry.

require "optparse"
require "pathname"
require "nokogiri"
require "relaton/cli"
# require "byebug"

warn "DEPRECATED: use relaton concatenate"

options = {
  outfile: "relaton-collection.xml"
}

opt_parser = OptionParser.new do |opts|
  opts.banner += " <source-mn-relaton-xml-dir>"

  opts.on(
    '-t',
    '--title TITLE',
    'Title of resulting Relaton collection'
  ) { |v|
    options[:title] = v
  }

  opts.on(
    '-g',
    '--organization ORGNAME',
    'Organization owner of Relaton collection'
  ) { |v|
    options[:organization] = v
  }

  opts.on(
    '-R',
    '--relaton-outfile COLLFILE',
    "Relation collection file to be created"
  ) { |v| options[:outfile] = v }

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

opt_parser.parse!(ARGV)
options[:source_dir] = ARGV.pop

bibdatas = []

Dir[ File.join(options[:source_dir], '**', '*.{xml,rxl}') ].reject { |p| File.directory? p }.each do |f|

  file = File.read(f, encoding: "utf-8")
  puts file.inspect

  bibdata_doc = Nokogiri.XML(file)

  # Skip if this XML isn't a Relaton XML
  next unless bibdata_doc.root.name == "bibdata"

  # Force a namespace otherwise Nokogiri won't parse.
  # The reason is we use Bibcollection's from_xml, but that one has an xmlns.
  # We don't want to change the code for bibdata hence this hack
  bibdata_doc.root['xmlns'] = "xmlns"
  bibdata_doc = Nokogiri.XML(bibdata_doc.to_xml)

  bibdata = Relaton::Bibdata.from_xml(bibdata_doc.root)

  # XML relaton file must already exist
  bibdata.relaton = f

  xml = Pathname.new(f).sub_ext('.xml')
  if File.file?(xml)
    bibdata.xml = xml
  end

  pdf = Pathname.new(f).sub_ext('.pdf')
  if File.file?(pdf)
    bibdata.pdf = pdf
  end

  doc = Pathname.new(f).sub_ext('.doc')
  if File.file?(doc)
    bibdata.doc = doc
  end

  html = Pathname.new(f).sub_ext('.html')
  if File.file?(html)
    bibdata.html = html
  end

  # puts "*"*30
  # puts bibdata.inspect

  bibdatas << bibdata
end

bibcollection = ::Relaton::Bibcollection.new(
  title: options[:title],
  # doctype: options[:doctype],
  author: options[:author],
  items: bibdatas
)

# puts bibcollection.to_xml

File.open(options[:outfile], "w:UTF-8") do |f|
  f.write bibcollection.to_xml
end

